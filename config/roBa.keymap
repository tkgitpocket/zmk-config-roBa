#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// ロータリーエンコーダにマウススクロールを割り当てる
//   ref: https://zenn.dev/nya3_neko2/scraps/4149ad6f41a584
//   ref: https://qiita.com/Reotech/items/e048073b3c5831d3e1c2

#define ZMK_MOUSE_POINTING_SCRL_VAL 100 // マウススクロール量定義

// 【ZMK】OS設定を日本語キーボードのまま使う
//    ref: https://note.com/kloir_z/n/n314e739f03a1
// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};


// オートマウスレイヤー関連
&zip_temp_layer {
    // 以下のキー以外を押すとAML解除
    excluded-positions = <
         6 // U
         7 // I
         8 // O
        10 // A
        22 // Z
        18 // J
        19 // K
        20 // L
        21 // ;
        34 // Ctrl
        40 // Backspace
        41 // Enter
    >;
    require-prior-idle-ms = <200>; // キー入力からこの時間はAMLを発動させない
};


&mkp_input_listener { input-processors = <&zip_temp_layer 4 10000>; };

&trackball { cpi = <800>; };

&trackball_listener {
    compatible = "zmk,input-listener";

    auto-mouse-layer {
        layers = <0 4>;
        input-processors = <&zip_temp_layer 4 10000>;
        process-next;
    };

};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <5 6>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        mouse4 {
            bindings = <&mkp MB4>;
            key-positions = <6 7>;
        };

        mouse5 {
            bindings = <&mkp MB5>;
            key-positions = <7 8>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <18 19>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <19 20>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <30 31>;
        };

        asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <31 32>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        // ref: https://zenn.dev/kot149/articles/zmk-auto-mouse-layer#shift%2B%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%AE%E5%8B%95%E4%BD%9C%E6%94%B9%E5%96%84
        // Shift+クリックの動作改善のマクロ定義
        /*
        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off MOUSE>;
            label = "exit_AML";
        };

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
            label = "KP_exit_AML";
        };
*/
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // 新しいスクロール動作の追加

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        // ref: https://zenn.dev/kot149/articles/zmk-auto-mouse-layer#shift%2B%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%81%AE%E5%8B%95%E4%BD%9C%E6%94%B9%E5%96%84
        // Shift+クリックの動作改善のbehavior定義
        /*
        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };
*/
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W             &kp E         &kp R                          &kp T                                                                         &kp Y        &kp U  &kp I      &kp O       &kp P
&mt LCTRL A         &kp S             &kp D         &kp F                          &mt LEFT_SHIFT G        &kp LS(LG(S))                    &kp EQUAL            &kp H        &kp J  &kp K      &kp L       &lt_to_layer_0 5 MINUS
&mt LEFT_SHIFT Z    &kp X             &kp C         &kp V                          &kp B                   &kp ASTERISK                     &kp UNDERSCORE       &kp N        &kp M  &kp COMMA  &kp PERIOD  &kp BACKSLASH
&mt LEFT_SHIFT ESC  &mt LEFT_GUI TAB  &kp LEFT_ALT  &lt_to_layer_0 1 INT_MUHENKAN  &lt_to_layer_0 2 SPACE  &lt_to_layer_0 3 INT_HENKAN      &mt RCTRL BACKSPACE  &lt 1 ENTER                                &kp SLASH
            >;

            // sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>; // デフォルト

            sensor-bindings = <&scroll_up_down>; // ロータリーエンコーダをマウススクロールにする
        };

        symbol {
            bindings = <
&kp EXCLAMATION     &kp DOUBLE_QUOTES  &kp HASH      &kp DOLLAR              &kp PERCENT                                                 &kp AMPERSAND  &kp SINGLE_QUOTE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE
&kp LCTRL           &kp SEMICOLON      &kp COLON     &kp LEFT_BRACE          &kp RIGHT_BRACE  &trans                &kp COMMA            &kp CARET      &kp AT_SIGN       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp EQUAL
&kp TAB             &kp PLUS           &kp ASTERISK  &kp TILDE               &kp PRINTSCREEN  &trans                &kp PERIOD           &kp SEMICOLON  &kp COLON         &kp LESS_THAN         &kp GREATER_THAN       &kp UNDERSCORE
&mt LEFT_SHIFT ESC  &kp LEFT_WIN       &kp LEFT_ALT  &mt LCTRL INT_MUHENKAN  &kp SPACE        &kp INT_MUHENKAN      &mt RCTRL BACKSPACE  &kp ENTER                                                                     &kp QUESTION
            >;
        };

        mouse_ctrl {
            bindings = <
&kp TAB               &kp LEFT_ALT  &kp END       &to 6             &kp ESC                                              &kp LC(Y)       &mkp MB4   &mkp MCLK  &mkp MB5   &kp UP_ARROW
&mt LCTRL HOME        &kp LC(S)     &kp DEL       &kp RIGHT_ARROW   &kp LEFT_SHIFT  &trans                &kp PAGE_UP    &kp BACKSPACE   &mkp LCLK  &none      &mkp RCLK  &lt_to_layer_0 5 MINUS
&mt LEFT_SHIFT LC(Z)  &kp LC(X)     &kp LC(C)     &kp LC(V)         &kp LEFT_ARROW  &kp ASTERISK          &kp PAGE_DOWN  &kp DOWN_ARROW  &none      &mkp LCLK  &mkp RCLK  &kp ENTER
&mt LEFT_SHIFT ESC    &kp LWIN      &kp LEFT_ALT  &kp INT_MUHENKAN  &kp SPACE       &kp INT_MUHENKAN      &kp RCTRL      &kp ENTER                                        &kp RIGHT_SHIFT
            >;
        };

        num_function {
            bindings = <
&kp NUMBER_1        &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                                            &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&kp F1              &kp F2        &kp F3        &kp F4        &kp F5           &trans            &trans               &kp F6        &kp F7        &kp F8        &kp F9        &kp EQUAL
&kp TAB             &kp F10       &kp F11       &kp F12       &kp PRINTSCREEN  &trans            &trans               &kp PLUS      &kp ASTERISK  &kp COMMA     &kp PERIOD    &kp UNDERSCORE
&mt LEFT_SHIFT ESC  &kp LEFT_WIN  &kp LEFT_ALT  &kp DEL       &kp SPACE        &kp INT_KANA      &mt RCTRL BACKSPACE  &kp ENTER                                               &kp QUESTION
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                             &trans     &mkp MB4  &mkp MB3  &mkp MB5  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans         &trans     &mkp MB1  &mkp MB1  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans         &trans     &trans    &mkp MB1  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &kp BACKSPACE  &kp ENTER                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &to 0         &to 0   &to 0       &to 0        &to 0                                                   &bt BT_CLR_ALL
            >;
        };
    };
};
